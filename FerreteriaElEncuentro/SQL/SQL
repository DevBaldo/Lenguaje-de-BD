CREATE TABLE Proveedores (
    CodProveedor INT PRIMARY KEY,
    nombre_proveedor VARCHAR2(100),
    producto_ventas VARCHAR2(100)
);

-- Table: Sucursal
CREATE TABLE Sucursal (
    cod_sucursal INT PRIMARY KEY,
    Correo VARCHAR2(100),
    Direccion VARCHAR2(200),
    Telefono VARCHAR2(20)
);

-- Table: Proveedores_Sucursal
CREATE TABLE Proveedores_Sucursal (
    cod_proveedor INT,
    cod_sucursal INT,
    FOREIGN KEY (cod_proveedor) REFERENCES Proveedores(CodProveedor),
    FOREIGN KEY (cod_sucursal) REFERENCES Sucursal(cod_sucursal)
);

-- Table: Departamentos
CREATE TABLE Departamentos (
    cod_departamento INT PRIMARY KEY,
    nombre_departamento VARCHAR2(100),
    descrip_departamento VARCHAR2(200)
);

-- INSERT INTO Departamentos(cod_departamento,nombre_departamento,descrip_departamento) VALUES(1,'Departamento de Finanzas', 'Responsable de gestionar los recursos financieros');
-- INSERT INTO Departamentos(cod_departamento,nombre_departamento,descrip_departamento) VALUES(2,'Departamento de Cobros', 'Responsable de gestionar los cobros.');
-- INSERT INTO Departamentos(cod_departamento,nombre_departamento,descrip_departamento) VALUES(3,'Departamento de Recursos Huamnos', 'Responsable de gestionar los recursos humanos de la empresa');


select * from Departamentos;


-- Table: Empleados
CREATE TABLE Empleados (
    cod_empleado INT PRIMARY KEY,
    nombre VARCHAR2(100),
    primer_apellido VARCHAR2(100),
    segundo_apellido VARCHAR2(100),
    correo VARCHAR2(100),
    numero VARCHAR2(20),
    departamento INT,
    FOREIGN KEY (departamento) REFERENCES Departamentos(cod_departamento)
);

-- Table: Sucursal_Departamentos
CREATE TABLE Sucursal_Departamentos (
    cod_sucursal INT,
    cod_departamento INT,
    FOREIGN KEY (cod_sucursal) REFERENCES Sucursal(cod_sucursal),
    FOREIGN KEY (cod_departamento) REFERENCES Departamentos(cod_departamento)
);

-- Table: Inventarios
CREATE TABLE Inventarios (
    cod_inventario INT PRIMARY KEY,
    cod_sucursal INT,
    Cantidad INT,
    FechaIngreso DATE,
    FOREIGN KEY (cod_sucursal) REFERENCES Sucursal(cod_sucursal)
);

-- Table: Productos
CREATE TABLE Productos (
    cod_producto INT PRIMARY KEY,
    nombre VARCHAR2(100),
    imagen VARCHAR2(200),
    precio NUMBER (10,2),
    cod_inventario INT,
    FOREIGN KEY (cod_inventario) REFERENCES Inventarios(cod_inventario)
);
select * from productos


-- Table: Facturacion
CREATE TABLE Facturacion (
    numero_factura INT PRIMARY KEY,
    cod_producto INT,
    FOREIGN KEY (cod_producto) REFERENCES Productos(cod_producto)
);

-- Table: Pagos
CREATE TABLE Pagos (
    num_transaccion INT PRIMARY KEY,
    forma_pago VARCHAR2(50)
);
-- Table: Clientes
CREATE TABLE Clientes (
    cod_cliente INT PRIMARY KEY,
    Nombre VARCHAR2(100),
    primerApellido VARCHAR2(100),
    segundoApellido VARCHAR2(100),
    Numero VARCHAR2(20),
    Correo VARCHAR2(100),
    numero_factura INT,
    num_transaccion INT,
    FOREIGN KEY (numero_factura) REFERENCES Facturacion(numero_factura),
    FOREIGN KEY (num_transaccion) REFERENCES Pagos(num_transaccion)
);


-- Table: Productos_Clientes
CREATE TABLE Productos_Clientes (
    cod_producto INT,
    cod_cliente INT,
    FOREIGN KEY (cod_producto) REFERENCES Productos(cod_producto),
    FOREIGN KEY (cod_cliente) REFERENCES Clientes(cod_cliente)
);

-- Table: Envios
CREATE TABLE Envios (
    numero_envio INT PRIMARY KEY,
    Direccion VARCHAR2(200)
);

-- Table: Envios_Clientes
CREATE TABLE Envios_Clientes (
    cod_cliente INT,
    numero_envio INT,
    FOREIGN KEY (cod_cliente) REFERENCES Clientes(cod_cliente),
    FOREIGN KEY (numero_envio) REFERENCES Envios(numero_envio)
);

-- Table: Forma_Pago
CREATE TABLE Forma_Pago (
    num_transaccion INT PRIMARY KEY,
    forma_pago VARCHAR2(50)
    FOREIGN KEY (num_transaccion) REFERENCES Pagos(num_transaccion)
);

--Procedimiento para insertar una nueva sucursal
CREATE OR REPLACE PROCEDURE insertar_sucursal(
    p_cod_sucursal IN Sucursal.cod_sucursal%TYPE,
    p_correo IN Sucursal.Correo%TYPE,
    p_direccion IN Sucursal.Direccion%TYPE,
    p_telefono IN Sucursal.Telefono%TYPE
) IS
BEGIN
    INSERT INTO Sucursal (cod_sucursal, Correo, Direccion, Telefono)
    VALUES (p_cod_sucursal, p_correo, p_direccion, p_telefono);
END insertar_sucursal;
/


--Procedimiento para actualizar una sucursal
CREATE OR REPLACE PROCEDURE actualizar_sucursal(
    p_cod_sucursal IN Sucursal.cod_sucursal%TYPE,
    p_correo IN Sucursal.Correo%TYPE,
    p_direccion IN Sucursal.Direccion%TYPE,
    p_telefono IN Sucursal.Telefono%TYPE
) IS
BEGIN
    UPDATE Sucursal
    SET Correo = p_correo,
        Direccion = p_direccion,
        Telefono = p_telefono
    WHERE cod_sucursal = p_cod_sucursal;
END actualizar_sucursal;
/

--Procedimiento para eliminar una sucursal
CREATE OR REPLACE PROCEDURE eliminar_sucursal(
    p_cod_sucursal IN Sucursal.cod_sucursal%TYPE
) IS
BEGIN
    DELETE FROM Sucursal WHERE cod_sucursal = p_cod_sucursal;
END eliminar_sucursal;
/

----DEPARTAMENTO----
--Procedimiento para insertar un nuevo departamento
CREATE OR REPLACE PROCEDURE insertar_departamento(
    p_cod_departamento IN Departamentos.cod_departamento%TYPE,
    p_nombre_departamento IN Departamentos.nombre_departamento%TYPE,
    p_descrip_departamento IN Departamentos.descrip_departamento%TYPE
) IS
BEGIN
    INSERT INTO Departamentos (cod_departamento, nombre_departamento, descrip_departamento)
    VALUES (p_cod_departamento, p_nombre_departamento, p_descrip_departamento);
END insertar_departamento;
/

--Procedimiento para actualizar un departamento
CREATE OR REPLACE PROCEDURE actualizar_departamento(
    p_cod_departamento IN Departamentos.cod_departamento%TYPE,
    p_nombre_departamento IN Departamentos.nombre_departamento%TYPE,
    p_descrip_departamento IN Departamentos.descrip_departamento%TYPE
) IS
BEGIN
    UPDATE Departamentos
    SET nombre_departamento = p_nombre_departamento,
        descrip_departamento = p_descrip_departamento
    WHERE cod_departamento = p_cod_departamento;
END actualizar_departamento;
/

CREATE OR REPLACE PROCEDURE eliminar_departamento(
    p_cod_departamento IN Departamentos.cod_departamento%TYPE
) IS
BEGIN
    DELETE FROM Departamentos WHERE cod_departamento = p_cod_departamento;
END eliminar_departamento;

--Tabla de Auditoria Departamentos
CREATE TABLE Departamentos_Audit (
    audit_id INT PRIMARY KEY,
    cod_departamento INT,
    nombre_departamento VARCHAR2(100),
    descrip_departamento VARCHAR2(200),
    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    audit_operation VARCHAR2(10)
);

--Tabla de Auditoria sucursal
CREATE TABLE Sucursal_Audit (
    audit_id INT PRIMARY KEY,
    cod_sucursal INT,
    Correo VARCHAR2(100),
    Direccion VARCHAR2(200),
    Telefono VARCHAR2(20),
    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    audit_operation VARCHAR2(10)
);

CREATE SEQUENCE dept_audit_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE suc_audit_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_departamentos_audit
AFTER DELETE ON Departamentos
FOR EACH ROW
BEGIN
    INSERT INTO Departamentos_Audit (
        audit_id, cod_departamento, nombre_departamento, descrip_departamento, audit_operation
    ) VALUES (
        dept_audit_seq.NEXTVAL,
        :OLD.cod_departamento,
        :OLD.nombre_departamento,
        :OLD.descrip_departamento,
        'DELETE'
    );
END;

CREATE OR REPLACE TRIGGER trg_sucursal_audit
AFTER DELETE ON Sucursal
FOR EACH ROW
BEGIN
    INSERT INTO Sucursal_Audit (
        audit_id, cod_sucursal, Correo, Direccion, Telefono, audit_operation
    ) VALUES (
        suc_audit_seq.NEXTVAL,
        :OLD.cod_sucursal,
        :OLD.Correo,
        :OLD.Direccion,
        :OLD.Telefono,
        'DELETE'
    );
END;

--vista sucursal
CREATE OR REPLACE VIEW Sucursal_Departamentos_View AS
SELECT Sucursal.cod_sucursal, 
       Sucursal.Correo, 
       Sucursal.Direccion, 
       Sucursal.Telefono, 
       Departamentos.cod_departamento, 
       Departamentos.nombre_departamento, 
       Departamentos.descrip_departamento
FROM Sucursal
JOIN Sucursal_Departamentos ON Sucursal.cod_sucursal = Sucursal_Departamentos.cod_sucursal
JOIN Departamentos ON Sucursal_Departamentos.cod_departamento = Departamentos.cod_departamento;


--vista proveedores
CREATE OR REPLACE VIEW Proveedores_Sucursales_View AS
SELECT Proveedores.CodProveedor, 
       Proveedores.nombre_proveedor, 
       Proveedores.producto_ventas, 
       Sucursal.cod_sucursal, 
       Sucursal.Correo, 
       Sucursal.Direccion, 
       Sucursal.Telefono
FROM Proveedores
JOIN Proveedores_Sucursal ON Proveedores.CodProveedor = Proveedores_Sucursal.cod_proveedor
JOIN Sucursal ON Proveedores_Sucursal.cod_sucursal = Sucursal.cod_sucursal;

----Productos----
--Procedimiento para insertar un nuevo producto
CREATE OR REPLACE PROCEDURE CrearProducto (
    cod_producto IN productos.cod_producto%TYPE,
    nombre IN productos.nombre%TYPE,
    imagen IN productos.imagen%TYPE,
    precio IN productos.precio%TYPE,
    cod_inventario IN productos.cod_inventario%TYPE
) AS
BEGIN
    INSERT INTO productos (cod_producto, nombre, imagen, precio, cod_inventario)
    VALUES (cod_producto, nombre, imagen, precio, cod_inventario);
END;

--Procedimiento para seleccionar productos
CREATE OR REPLACE PROCEDURE LeerTodosLosProductos (
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT cod_producto, nombre, imagen, precio, cod_inventario
    FROM productos;
END;

--Procedimiento para actualizar un producto
CREATE OR REPLACE PROCEDURE ActualizarProducto (
    cod_producto IN Productos.cod_producto%TYPE,
    nombre IN Productos.nombre%TYPE,
    imagen IN Productos.imagen%TYPE,
    precio IN Productos.precio%TYPE,
    cod_inventario IN Productos.cod_inventario%TYPE
) AS
BEGIN
    UPDATE productos
    SET nombre = nombre,
        imagen = imagen,
        precio = precio,
        cod_inventario = cod_inventario
    WHERE cod_producto = cod_producto;
END;

--Procedimiento para eliminar un producto
CREATE OR REPLACE PROCEDURE EliminarProducto (
    cod_producto IN Productos.cod_producto%TYPE
) AS
BEGIN
    DELETE FROM productos
    WHERE cod_producto = cod_producto;
END;

---Vista que ordena los productos de menor a mayor precio
CREATE VIEW vista_productos_asc AS
SELECT 
    cod_producto,
    nombre,
    imagen,
    precio,
    cod_inventario
FROM 
    Productos
ORDER BY 
    precio ASC;

---Vista que ordena los productos de mayor a menor precio
CREATE VIEW vista_productos_desc AS
SELECT 
    cod_producto,
    nombre,
    imagen,
    precio,
    cod_inventario
FROM 
    Productos
ORDER BY 
    precio DESC;


-----------------------------------------------------------------------------------------------
--Procedimientos Proveedor
--Inserta

CREATE OR REPLACE PROCEDURE Insertar_Proveedor (
    p_CodProveedor IN INT,
    p_nombre_proveedor IN VARCHAR2,
    p_producto_ventas IN VARCHAR2
) AS
BEGIN
    INSERT INTO Proveedores (CodProveedor, nombre_proveedor, producto_ventas)
    VALUES (p_CodProveedor, p_nombre_proveedor, p_producto_ventas);
END;

--actualiza

CREATE OR REPLACE PROCEDURE Actualizar_Proveedor (
    p_CodProveedor IN INT,
    p_nombre_proveedor IN VARCHAR2,
    p_producto_ventas IN VARCHAR2
) AS
BEGIN
    UPDATE Proveedores
    SET nombre_proveedor = p_nombre_proveedor,
        producto_ventas = p_producto_ventas
    WHERE CodProveedor = p_CodProveedor;
END;

--elimina

CREATE OR REPLACE PROCEDURE Eliminar_Proveedor (
    p_CodProveedor IN INT
) AS
BEGIN
    DELETE FROM Proveedores
    WHERE CodProveedor = p_CodProveedor;
END;

--Procedimientos Empleados

--insertar
CREATE OR REPLACE PROCEDURE Insertar_Empleado (
    p_cod_empleado IN INT,
    p_nombre IN VARCHAR2,
    p_primer_apellido IN VARCHAR2,
    p_segundo_apellido IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_numero IN VARCHAR2,
    p_departamento IN INT
) AS
BEGIN
    INSERT INTO Empleados (cod_empleado, nombre, primer_apellido, segundo_apellido, correo, numero, departamento)
    VALUES (p_cod_empleado, p_nombre, p_primer_apellido, p_segundo_apellido, p_correo, p_numero, p_departamento);
END;


--actualizar

CREATE OR REPLACE PROCEDURE Actualizar_Empleado (
    p_cod_empleado IN INT,
    p_nombre IN VARCHAR2,
    p_primer_apellido IN VARCHAR2,
    p_segundo_apellido IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_numero IN VARCHAR2,
    p_departamento IN INT
) AS
BEGIN
    UPDATE Empleados
    SET nombre = p_nombre,
        primer_apellido = p_primer_apellido,
        segundo_apellido = p_segundo_apellido,
        correo = p_correo,
        numero = p_numero,
        departamento = p_departamento
    WHERE cod_empleado = p_cod_empleado;
END;

--Vistas proveedores

CREATE OR REPLACE VIEW Vista_Proveedores AS
SELECT CodProveedor, nombre_proveedor, producto_ventas
FROM Proveedores;


--vistas empleados

CREATE OR REPLACE VIEW Vista_Empleados AS
SELECT cod_empleado, nombre, primer_apellido, segundo_apellido, correo, numero, departamento
FROM Empleados;

--Agregar cliente
CREATE OR REPLACE PROCEDURE insertar_cliente(
    p_cod_cliente IN CLIENTES.cod_cliente%TYPE,
    p_nombre IN CLIENTES.Nombre%TYPE,
    p_primerApellido IN CLIENTES.primerApellido%TYPE,
    p_segundoApellido IN CLIENTES.segundoApellido%TYPE,
    p_numero IN CLIENTES.Numero%TYPE,
    p_correo IN CLIENTES.Correo%TYPE,
    p_numero_factura IN CLIENTES.numero_factura%TYPE,
    p_num_transaccion IN CLIENTES.num_transaccion%TYPE
) IS
BEGIN
    INSERT INTO CLIENTES (
        cod_cliente, Nombre, primerApellido, segundoApellido, Numero, Correo, numero_factura, num_transaccion
    ) VALUES (
        p_cod_cliente, p_nombre, p_primerApellido, p_segundoApellido, p_numero, p_correo, p_numero_factura, p_num_transaccion
    );
END insertar_cliente;



--Actualizar cliente
CREATE OR REPLACE PROCEDURE actualizar_cliente(
    p_codigo IN CLIENTES.CODIGO%TYPE,
    p_nombre IN CLIENTES.NOMBRE%TYPE,
    p_apellido IN CLIENTES.APELLIDO%TYPE,
    p_telefono IN CLIENTES.TELEFONO%TYPE,
    p_correo IN CLIENTES.CORREO%TYPE
) IS
BEGIN
    UPDATE CLIENTES
    SET NOMBRE = p_nombre,
        APELLIDO = p_apellido,
        TELEFONO = p_telefono,
        CORREO = p_correo
    WHERE CODIGO = p_codigo;
END actualizar_cliente;

--Eliminar cliente
CREATE OR REPLACE PROCEDURE actualizar_cliente(
    p_cod_cliente IN CLIENTES.cod_cliente%TYPE,
    p_nombre IN CLIENTES.Nombre%TYPE,
    p_primerApellido IN CLIENTES.primerApellido%TYPE,
    p_segundoApellido IN CLIENTES.segundoApellido%TYPE,
    p_numero IN CLIENTES.Numero%TYPE,
    p_correo IN CLIENTES.Correo%TYPE,
    p_numero_factura IN CLIENTES.numero_factura%TYPE,
    p_num_transaccion IN CLIENTES.num_transaccion%TYPE
) IS
BEGIN
    UPDATE CLIENTES
    SET Nombre = p_nombre,
        primerApellido = p_primerApellido,
        segundoApellido = p_segundoApellido,
        Numero = p_numero,
        Correo = p_correo,
        numero_factura = p_numero_factura,
        num_transaccion = p_num_transaccion
    WHERE cod_cliente = p_cod_cliente;
END actualizar_cliente;



---------------------------------------------------------------------------------------------------
--Agregar envio
CREATE OR REPLACE PROCEDURE insertar_envio(
    p_numero_envio IN Envios.numero_envio%TYPE,
    p_direccion IN Envios.Direccion%TYPE
) IS
BEGIN
    INSERT INTO Envios (numero_envio, Direccion)
    VALUES (p_numero_envio, p_direccion);
END insertar_envio;


--Editar envio
CREATE OR REPLACE PROCEDURE actualizar_envio(
    p_numero_envio IN Envios.numero_envio%TYPE,
    p_direccion IN Envios.Direccion%TYPE
) IS
BEGIN
    UPDATE Envios
    SET Direccion = p_direccion
    WHERE numero_envio = p_numero_envio;
END actualizar_envio;


--Eliminar envio
CREATE OR REPLACE PROCEDURE eliminar_envio(
    p_numero_envio IN Envios.numero_envio%TYPE
) IS
BEGIN
    DELETE FROM Envios WHERE numero_envio = p_numero_envio;
END eliminar_envio;

----------------------------------------------------------------------------------------------------------
--Envio_Clientes
CREATE OR REPLACE PROCEDURE insertar_envio_cliente(
    p_cod_cliente IN Envios_Clientes.cod_cliente%TYPE,
    p_numero_envio IN Envios_Clientes.numero_envio%TYPE
) IS
BEGIN
    INSERT INTO Envios_Clientes (cod_cliente, numero_envio)
    VALUES (p_cod_cliente, p_numero_envio);
END insertar_envio_cliente;

---Actualizar Envio_Clientes
CREATE OR REPLACE PROCEDURE actualizar_envio_cliente(
    p_cod_cliente IN Envios_Clientes.cod_cliente%TYPE,
    p_numero_envio IN Envios_Clientes.numero_envio%TYPE,
    p_new_cod_cliente IN Envios_Clientes.cod_cliente%TYPE,
    p_new_numero_envio IN Envios_Clientes.numero_envio%TYPE
) IS
BEGIN
    UPDATE Envios_Clientes
    SET cod_cliente = p_new_cod_cliente,
        numero_envio = p_new_numero_envio
    WHERE cod_cliente = p_cod_cliente AND numero_envio = p_numero_envio;
END actualizar_envio_cliente;

---Eliminar Envio_Cliente
CREATE OR REPLACE PROCEDURE eliminar_envio_cliente(
    p_cod_cliente IN Envios_Clientes.cod_cliente%TYPE,
    p_numero_envio IN Envios_Clientes.numero_envio%TYPE
) IS
BEGIN
    DELETE FROM Envios_Clientes
    WHERE cod_cliente = p_cod_cliente AND numero_envio = p_numero_envio;
END eliminar_envio_cliente;

--vista de datos de clientes
CREATE OR REPLACE VIEW VISTA_CLIENTES AS
SELECT 
    cod_cliente AS CODIGO,
    Nombre AS NOMBRE,
    primerApellido || ' ' || segundoApellido AS APELLIDO,
    Numero AS TELEFONO,
    Correo AS CORREO
FROM 
    Clientes;


--Vista de detalles de los env os con info del cliente
CREATE OR REPLACE VIEW VISTA_ENVIOS_DETALLE AS
SELECT 
    E.numero_envio AS CODIGO_ENVIO,
    E.Direccion AS DIRECCION,
    C.Nombre AS NOMBRE_CLIENTE,
    C.primerApellido || ' ' || C.segundoApellido AS APELLIDO_CLIENTE,
    C.Numero AS TELEFONO_CLIENTE,
    C.Correo AS CORREO_CLIENTE
FROM 
    Envios E
JOIN 
    Envios_Clientes EC ON E.numero_envio = EC.numero_envio
JOIN 
    Clientes C ON EC.cod_cliente = C.cod_cliente;